<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace DockerPhpClient\Compose\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ServiceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'DockerPhpClient\\Compose\\Model\\Service';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \DockerPhpClient\Compose\Model\Service;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \DockerPhpClient\Compose\Model\Service();
        $data = clone $data;
        if (property_exists($data, 'deploy') && $data->{'deploy'} !== null) {
            $value = $data->{'deploy'};
            if (is_object($data->{'deploy'})) {
                $value = $data->{'deploy'};
            } elseif (is_null($data->{'deploy'})) {
                $value = $data->{'deploy'};
            }
            $object->setDeploy($value);
            unset($data->{'deploy'});
        }
        if (property_exists($data, 'build') && $data->{'build'} !== null) {
            $value_1 = $data->{'build'};
            if (is_string($data->{'build'})) {
                $value_1 = $data->{'build'};
            } elseif (is_object($data->{'build'})) {
                $value_1 = $data->{'build'};
            }
            $object->setBuild($value_1);
            unset($data->{'build'});
        }
        if (property_exists($data, 'cap_add') && $data->{'cap_add'} !== null) {
            $values = [];
            foreach ($data->{'cap_add'} as $value_2) {
                $values[] = $value_2;
            }
            $object->setCapAdd($values);
            unset($data->{'cap_add'});
        }
        if (property_exists($data, 'cap_drop') && $data->{'cap_drop'} !== null) {
            $values_1 = [];
            foreach ($data->{'cap_drop'} as $value_3) {
                $values_1[] = $value_3;
            }
            $object->setCapDrop($values_1);
            unset($data->{'cap_drop'});
        }
        if (property_exists($data, 'cgroup_parent') && $data->{'cgroup_parent'} !== null) {
            $object->setCgroupParent($data->{'cgroup_parent'});
            unset($data->{'cgroup_parent'});
        }
        if (property_exists($data, 'command') && $data->{'command'} !== null) {
            $value_4 = $data->{'command'};
            if (is_string($data->{'command'})) {
                $value_4 = $data->{'command'};
            } elseif (is_array($data->{'command'})) {
                $values_2 = [];
                foreach ($data->{'command'} as $value_5) {
                    $values_2[] = $value_5;
                }
                $value_4 = $values_2;
            }
            $object->setCommand($value_4);
            unset($data->{'command'});
        }
        if (property_exists($data, 'configs') && $data->{'configs'} !== null) {
            $values_3 = [];
            foreach ($data->{'configs'} as $value_6) {
                $value_7 = $value_6;
                if (is_string($value_6)) {
                    $value_7 = $value_6;
                } elseif (is_object($value_6)) {
                    $value_7 = $value_6;
                }
                $values_3[] = $value_7;
            }
            $object->setConfigs($values_3);
            unset($data->{'configs'});
        }
        if (property_exists($data, 'container_name') && $data->{'container_name'} !== null) {
            $object->setContainerName($data->{'container_name'});
            unset($data->{'container_name'});
        }
        if (property_exists($data, 'credential_spec') && $data->{'credential_spec'} !== null) {
            $object->setCredentialSpec($this->denormalizer->denormalize($data->{'credential_spec'}, 'DockerPhpClient\\Compose\\Model\\ServiceCredentialSpec', 'json', $context));
            unset($data->{'credential_spec'});
        }
        if (property_exists($data, 'depends_on') && $data->{'depends_on'} !== null) {
            $values_4 = [];
            foreach ($data->{'depends_on'} as $value_8) {
                $values_4[] = $value_8;
            }
            $object->setDependsOn($values_4);
            unset($data->{'depends_on'});
        }
        if (property_exists($data, 'devices') && $data->{'devices'} !== null) {
            $values_5 = [];
            foreach ($data->{'devices'} as $value_9) {
                $values_5[] = $value_9;
            }
            $object->setDevices($values_5);
            unset($data->{'devices'});
        }
        if (property_exists($data, 'dns') && $data->{'dns'} !== null) {
            $value_10 = $data->{'dns'};
            if (is_string($data->{'dns'})) {
                $value_10 = $data->{'dns'};
            } elseif (is_array($data->{'dns'})) {
                $values_6 = [];
                foreach ($data->{'dns'} as $value_11) {
                    $values_6[] = $value_11;
                }
                $value_10 = $values_6;
            }
            $object->setDns($value_10);
            unset($data->{'dns'});
        }
        if (property_exists($data, 'dns_search') && $data->{'dns_search'} !== null) {
            $value_12 = $data->{'dns_search'};
            if (is_string($data->{'dns_search'})) {
                $value_12 = $data->{'dns_search'};
            } elseif (is_array($data->{'dns_search'})) {
                $values_7 = [];
                foreach ($data->{'dns_search'} as $value_13) {
                    $values_7[] = $value_13;
                }
                $value_12 = $values_7;
            }
            $object->setDnsSearch($value_12);
            unset($data->{'dns_search'});
        }
        if (property_exists($data, 'domainname') && $data->{'domainname'} !== null) {
            $object->setDomainname($data->{'domainname'});
            unset($data->{'domainname'});
        }
        if (property_exists($data, 'entrypoint') && $data->{'entrypoint'} !== null) {
            $value_14 = $data->{'entrypoint'};
            if (is_string($data->{'entrypoint'})) {
                $value_14 = $data->{'entrypoint'};
            } elseif (is_array($data->{'entrypoint'})) {
                $values_8 = [];
                foreach ($data->{'entrypoint'} as $value_15) {
                    $values_8[] = $value_15;
                }
                $value_14 = $values_8;
            }
            $object->setEntrypoint($value_14);
            unset($data->{'entrypoint'});
        }
        if (property_exists($data, 'env_file') && $data->{'env_file'} !== null) {
            $value_16 = $data->{'env_file'};
            if (is_string($data->{'env_file'})) {
                $value_16 = $data->{'env_file'};
            } elseif (is_array($data->{'env_file'})) {
                $values_9 = [];
                foreach ($data->{'env_file'} as $value_17) {
                    $values_9[] = $value_17;
                }
                $value_16 = $values_9;
            }
            $object->setEnvFile($value_16);
            unset($data->{'env_file'});
        }
        if (property_exists($data, 'environment') && $data->{'environment'} !== null) {
            $value_18 = $data->{'environment'};
            if (isset($data->{'environment'})) {
                $values_10 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data->{'environment'} as $key => $value_19) {
                    if (preg_match('/.+/', $key) && array_key_exists($key, $data->{'environment'})) {
                        $value_20 = $value_19;
                        if (is_string($value_19)) {
                            $value_20 = $value_19;
                        } elseif (is_float($value_19)) {
                            $value_20 = $value_19;
                        } elseif (is_null($value_19)) {
                            $value_20 = $value_19;
                        }
                        $values_10[$key] = $value_20;
                        continue;
                    }
                }
                $value_18 = $values_10;
            } elseif (is_array($data->{'environment'})) {
                $values_11 = [];
                foreach ($data->{'environment'} as $value_21) {
                    $values_11[] = $value_21;
                }
                $value_18 = $values_11;
            }
            $object->setEnvironment($value_18);
            unset($data->{'environment'});
        }
        if (property_exists($data, 'expose') && $data->{'expose'} !== null) {
            $values_12 = [];
            foreach ($data->{'expose'} as $value_22) {
                $value_23 = $value_22;
                if (is_string($value_22)) {
                    $value_23 = $value_22;
                } elseif (is_float($value_22)) {
                    $value_23 = $value_22;
                }
                $values_12[] = $value_23;
            }
            $object->setExpose($values_12);
            unset($data->{'expose'});
        }
        if (property_exists($data, 'external_links') && $data->{'external_links'} !== null) {
            $values_13 = [];
            foreach ($data->{'external_links'} as $value_24) {
                $values_13[] = $value_24;
            }
            $object->setExternalLinks($values_13);
            unset($data->{'external_links'});
        }
        if (property_exists($data, 'extra_hosts') && $data->{'extra_hosts'} !== null) {
            $value_25 = $data->{'extra_hosts'};
            if (isset($data->{'extra_hosts'})) {
                $values_14 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data->{'extra_hosts'} as $key_1 => $value_26) {
                    if (preg_match('/.+/', $key_1) && array_key_exists($key_1, $data->{'extra_hosts'})) {
                        $value_27 = $value_26;
                        if (is_string($value_26)) {
                            $value_27 = $value_26;
                        } elseif (is_float($value_26)) {
                            $value_27 = $value_26;
                        } elseif (is_null($value_26)) {
                            $value_27 = $value_26;
                        }
                        $values_14[$key_1] = $value_27;
                        continue;
                    }
                }
                $value_25 = $values_14;
            } elseif (is_array($data->{'extra_hosts'})) {
                $values_15 = [];
                foreach ($data->{'extra_hosts'} as $value_28) {
                    $values_15[] = $value_28;
                }
                $value_25 = $values_15;
            }
            $object->setExtraHosts($value_25);
            unset($data->{'extra_hosts'});
        }
        if (property_exists($data, 'healthcheck') && $data->{'healthcheck'} !== null) {
            $object->setHealthcheck($this->denormalizer->denormalize($data->{'healthcheck'}, 'DockerPhpClient\\Compose\\Model\\Healthcheck', 'json', $context));
            unset($data->{'healthcheck'});
        }
        if (property_exists($data, 'hostname') && $data->{'hostname'} !== null) {
            $object->setHostname($data->{'hostname'});
            unset($data->{'hostname'});
        }
        if (property_exists($data, 'image') && $data->{'image'} !== null) {
            $object->setImage($data->{'image'});
            unset($data->{'image'});
        }
        if (property_exists($data, 'ipc') && $data->{'ipc'} !== null) {
            $object->setIpc($data->{'ipc'});
            unset($data->{'ipc'});
        }
        if (property_exists($data, 'isolation') && $data->{'isolation'} !== null) {
            $object->setIsolation($data->{'isolation'});
            unset($data->{'isolation'});
        }
        if (property_exists($data, 'labels') && $data->{'labels'} !== null) {
            $value_29 = $data->{'labels'};
            if (isset($data->{'labels'})) {
                $values_16 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data->{'labels'} as $key_2 => $value_30) {
                    if (preg_match('/.+/', $key_2) && array_key_exists($key_2, $data->{'labels'})) {
                        $value_31 = $value_30;
                        if (is_string($value_30)) {
                            $value_31 = $value_30;
                        } elseif (is_float($value_30)) {
                            $value_31 = $value_30;
                        } elseif (is_null($value_30)) {
                            $value_31 = $value_30;
                        }
                        $values_16[$key_2] = $value_31;
                        continue;
                    }
                }
                $value_29 = $values_16;
            } elseif (is_array($data->{'labels'})) {
                $values_17 = [];
                foreach ($data->{'labels'} as $value_32) {
                    $values_17[] = $value_32;
                }
                $value_29 = $values_17;
            }
            $object->setLabels($value_29);
            unset($data->{'labels'});
        }
        if (property_exists($data, 'links') && $data->{'links'} !== null) {
            $values_18 = [];
            foreach ($data->{'links'} as $value_33) {
                $values_18[] = $value_33;
            }
            $object->setLinks($values_18);
            unset($data->{'links'});
        }
        if (property_exists($data, 'logging') && $data->{'logging'} !== null) {
            $object->setLogging($this->denormalizer->denormalize($data->{'logging'}, 'DockerPhpClient\\Compose\\Model\\ServiceLogging', 'json', $context));
            unset($data->{'logging'});
        }
        if (property_exists($data, 'mac_address') && $data->{'mac_address'} !== null) {
            $object->setMacAddress($data->{'mac_address'});
            unset($data->{'mac_address'});
        }
        if (property_exists($data, 'network_mode') && $data->{'network_mode'} !== null) {
            $object->setNetworkMode($data->{'network_mode'});
            unset($data->{'network_mode'});
        }
        if (property_exists($data, 'networks') && $data->{'networks'} !== null) {
            $value_34 = $data->{'networks'};
            if (is_array($data->{'networks'})) {
                $values_19 = [];
                foreach ($data->{'networks'} as $value_35) {
                    $values_19[] = $value_35;
                }
                $value_34 = $values_19;
            } elseif (isset($data->{'networks'})) {
                $values_20 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data->{'networks'} as $key_3 => $value_36) {
                    if (preg_match('/^[a-zA-Z0-9._-]+$/', $key_3) && array_key_exists($key_3, $data->{'networks'})) {
                        $value_37 = $value_36;
                        if (is_object($value_36)) {
                            $value_37 = $value_36;
                        } elseif (is_null($value_36)) {
                            $value_37 = $value_36;
                        }
                        $values_20[$key_3] = $value_37;
                        continue;
                    }
                }
                $value_34 = $values_20;
            }
            $object->setNetworks($value_34);
            unset($data->{'networks'});
        }
        if (property_exists($data, 'pid') && $data->{'pid'} !== null) {
            $value_38 = $data->{'pid'};
            if (is_string($data->{'pid'})) {
                $value_38 = $data->{'pid'};
            } elseif (is_null($data->{'pid'})) {
                $value_38 = $data->{'pid'};
            }
            $object->setPid($value_38);
            unset($data->{'pid'});
        }
        if (property_exists($data, 'ports') && $data->{'ports'} !== null) {
            $values_21 = [];
            foreach ($data->{'ports'} as $value_39) {
                $value_40 = $value_39;
                if (is_float($value_39)) {
                    $value_40 = $value_39;
                } elseif (is_string($value_39)) {
                    $value_40 = $value_39;
                } elseif (is_object($value_39)) {
                    $value_40 = $value_39;
                }
                $values_21[] = $value_40;
            }
            $object->setPorts($values_21);
            unset($data->{'ports'});
        }
        if (property_exists($data, 'privileged') && $data->{'privileged'} !== null) {
            $object->setPrivileged($data->{'privileged'});
            unset($data->{'privileged'});
        }
        if (property_exists($data, 'read_only') && $data->{'read_only'} !== null) {
            $object->setReadOnly($data->{'read_only'});
            unset($data->{'read_only'});
        }
        if (property_exists($data, 'restart') && $data->{'restart'} !== null) {
            $object->setRestart($data->{'restart'});
            unset($data->{'restart'});
        }
        if (property_exists($data, 'security_opt') && $data->{'security_opt'} !== null) {
            $values_22 = [];
            foreach ($data->{'security_opt'} as $value_41) {
                $values_22[] = $value_41;
            }
            $object->setSecurityOpt($values_22);
            unset($data->{'security_opt'});
        }
        if (property_exists($data, 'shm_size') && $data->{'shm_size'} !== null) {
            $value_42 = $data->{'shm_size'};
            if (is_float($data->{'shm_size'})) {
                $value_42 = $data->{'shm_size'};
            } elseif (is_string($data->{'shm_size'})) {
                $value_42 = $data->{'shm_size'};
            }
            $object->setShmSize($value_42);
            unset($data->{'shm_size'});
        }
        if (property_exists($data, 'secrets') && $data->{'secrets'} !== null) {
            $values_23 = [];
            foreach ($data->{'secrets'} as $value_43) {
                $value_44 = $value_43;
                if (is_string($value_43)) {
                    $value_44 = $value_43;
                } elseif (is_object($value_43)) {
                    $value_44 = $value_43;
                }
                $values_23[] = $value_44;
            }
            $object->setSecrets($values_23);
            unset($data->{'secrets'});
        }
        if (property_exists($data, 'sysctls') && $data->{'sysctls'} !== null) {
            $value_45 = $data->{'sysctls'};
            if (isset($data->{'sysctls'})) {
                $values_24 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data->{'sysctls'} as $key_4 => $value_46) {
                    if (preg_match('/.+/', $key_4) && array_key_exists($key_4, $data->{'sysctls'})) {
                        $value_47 = $value_46;
                        if (is_string($value_46)) {
                            $value_47 = $value_46;
                        } elseif (is_float($value_46)) {
                            $value_47 = $value_46;
                        } elseif (is_null($value_46)) {
                            $value_47 = $value_46;
                        }
                        $values_24[$key_4] = $value_47;
                        continue;
                    }
                }
                $value_45 = $values_24;
            } elseif (is_array($data->{'sysctls'})) {
                $values_25 = [];
                foreach ($data->{'sysctls'} as $value_48) {
                    $values_25[] = $value_48;
                }
                $value_45 = $values_25;
            }
            $object->setSysctls($value_45);
            unset($data->{'sysctls'});
        }
        if (property_exists($data, 'stdin_open') && $data->{'stdin_open'} !== null) {
            $object->setStdinOpen($data->{'stdin_open'});
            unset($data->{'stdin_open'});
        }
        if (property_exists($data, 'stop_grace_period') && $data->{'stop_grace_period'} !== null) {
            $object->setStopGracePeriod($data->{'stop_grace_period'});
            unset($data->{'stop_grace_period'});
        }
        if (property_exists($data, 'stop_signal') && $data->{'stop_signal'} !== null) {
            $object->setStopSignal($data->{'stop_signal'});
            unset($data->{'stop_signal'});
        }
        if (property_exists($data, 'tmpfs') && $data->{'tmpfs'} !== null) {
            $value_49 = $data->{'tmpfs'};
            if (is_string($data->{'tmpfs'})) {
                $value_49 = $data->{'tmpfs'};
            } elseif (is_array($data->{'tmpfs'})) {
                $values_26 = [];
                foreach ($data->{'tmpfs'} as $value_50) {
                    $values_26[] = $value_50;
                }
                $value_49 = $values_26;
            }
            $object->setTmpfs($value_49);
            unset($data->{'tmpfs'});
        }
        if (property_exists($data, 'tty') && $data->{'tty'} !== null) {
            $object->setTty($data->{'tty'});
            unset($data->{'tty'});
        }
        if (property_exists($data, 'ulimits') && $data->{'ulimits'} !== null) {
            $values_27 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'ulimits'} as $key_5 => $value_51) {
                if (preg_match('/^[a-z]+$/', $key_5) && array_key_exists($key_5, $data->{'ulimits'})) {
                    $value_52 = $value_51;
                    if (is_int($value_51)) {
                        $value_52 = $value_51;
                    } elseif (is_object($value_51)) {
                        $value_52 = $value_51;
                    }
                    $values_27[$key_5] = $value_52;
                    continue;
                }
            }
            $object->setUlimits($values_27);
            unset($data->{'ulimits'});
        }
        if (property_exists($data, 'user') && $data->{'user'} !== null) {
            $object->setUser($data->{'user'});
            unset($data->{'user'});
        }
        if (property_exists($data, 'userns_mode') && $data->{'userns_mode'} !== null) {
            $object->setUsernsMode($data->{'userns_mode'});
            unset($data->{'userns_mode'});
        }
        if (property_exists($data, 'volumes') && $data->{'volumes'} !== null) {
            $values_28 = [];
            foreach ($data->{'volumes'} as $value_53) {
                $value_54 = $value_53;
                if (is_string($value_53)) {
                    $value_54 = $value_53;
                } elseif (is_object($value_53)) {
                    $value_54 = $value_53;
                }
                $values_28[] = $value_54;
            }
            $object->setVolumes($values_28);
            unset($data->{'volumes'});
        }
        if (property_exists($data, 'working_dir') && $data->{'working_dir'} !== null) {
            $object->setWorkingDir($data->{'working_dir'});
            unset($data->{'working_dir'});
        }
        foreach ($data as $key_6 => $value_55) {
            if (preg_match('/^x-/', $key_6)) {
                $object[$key_6] = $value_55;
            }
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        $value = $object->getDeploy();
        if (is_object($object->getDeploy())) {
            $value = $object->getDeploy();
        }
        if (is_null($object->getDeploy())) {
            $value = $object->getDeploy();
        }
        $data->{'deploy'} = $value;
        if (null !== $object->getBuild()) {
            $value_1 = $object->getBuild();
            if (is_string($object->getBuild())) {
                $value_1 = $object->getBuild();
            }
            if (is_object($object->getBuild())) {
                $value_1 = $object->getBuild();
            }
            $data->{'build'} = $value_1;
        }
        if (null !== $object->getCapAdd()) {
            $values = [];
            foreach ($object->getCapAdd() as $value_2) {
                $values[] = $value_2;
            }
            $data->{'cap_add'} = $values;
        }
        if (null !== $object->getCapDrop()) {
            $values_1 = [];
            foreach ($object->getCapDrop() as $value_3) {
                $values_1[] = $value_3;
            }
            $data->{'cap_drop'} = $values_1;
        }
        if (null !== $object->getCgroupParent()) {
            $data->{'cgroup_parent'} = $object->getCgroupParent();
        }
        if (null !== $object->getCommand()) {
            $value_4 = $object->getCommand();
            if (is_string($object->getCommand())) {
                $value_4 = $object->getCommand();
            }
            if (is_array($object->getCommand())) {
                $values_2 = [];
                foreach ($object->getCommand() as $value_5) {
                    $values_2[] = $value_5;
                }
                $value_4 = $values_2;
            }
            $data->{'command'} = $value_4;
        }
        if (null !== $object->getConfigs()) {
            $values_3 = [];
            foreach ($object->getConfigs() as $value_6) {
                $value_7 = $value_6;
                if (is_string($value_6)) {
                    $value_7 = $value_6;
                }
                if (is_object($value_6)) {
                    $value_7 = $value_6;
                }
                $values_3[] = $value_7;
            }
            $data->{'configs'} = $values_3;
        }
        if (null !== $object->getContainerName()) {
            $data->{'container_name'} = $object->getContainerName();
        }
        if (null !== $object->getCredentialSpec()) {
            $data->{'credential_spec'} = $this->normalizer->normalize($object->getCredentialSpec(), 'json', $context);
        }
        if (null !== $object->getDependsOn()) {
            $values_4 = [];
            foreach ($object->getDependsOn() as $value_8) {
                $values_4[] = $value_8;
            }
            $data->{'depends_on'} = $values_4;
        }
        if (null !== $object->getDevices()) {
            $values_5 = [];
            foreach ($object->getDevices() as $value_9) {
                $values_5[] = $value_9;
            }
            $data->{'devices'} = $values_5;
        }
        if (null !== $object->getDns()) {
            $value_10 = $object->getDns();
            if (is_string($object->getDns())) {
                $value_10 = $object->getDns();
            }
            if (is_array($object->getDns())) {
                $values_6 = [];
                foreach ($object->getDns() as $value_11) {
                    $values_6[] = $value_11;
                }
                $value_10 = $values_6;
            }
            $data->{'dns'} = $value_10;
        }
        if (null !== $object->getDnsSearch()) {
            $value_12 = $object->getDnsSearch();
            if (is_string($object->getDnsSearch())) {
                $value_12 = $object->getDnsSearch();
            }
            if (is_array($object->getDnsSearch())) {
                $values_7 = [];
                foreach ($object->getDnsSearch() as $value_13) {
                    $values_7[] = $value_13;
                }
                $value_12 = $values_7;
            }
            $data->{'dns_search'} = $value_12;
        }
        if (null !== $object->getDomainname()) {
            $data->{'domainname'} = $object->getDomainname();
        }
        if (null !== $object->getEntrypoint()) {
            $value_14 = $object->getEntrypoint();
            if (is_string($object->getEntrypoint())) {
                $value_14 = $object->getEntrypoint();
            }
            if (is_array($object->getEntrypoint())) {
                $values_8 = [];
                foreach ($object->getEntrypoint() as $value_15) {
                    $values_8[] = $value_15;
                }
                $value_14 = $values_8;
            }
            $data->{'entrypoint'} = $value_14;
        }
        if (null !== $object->getEnvFile()) {
            $value_16 = $object->getEnvFile();
            if (is_string($object->getEnvFile())) {
                $value_16 = $object->getEnvFile();
            }
            if (is_array($object->getEnvFile())) {
                $values_9 = [];
                foreach ($object->getEnvFile() as $value_17) {
                    $values_9[] = $value_17;
                }
                $value_16 = $values_9;
            }
            $data->{'env_file'} = $value_16;
        }
        if (null !== $object->getEnvironment()) {
            $value_18 = $object->getEnvironment();
            if (!is_null($object->getEnvironment())) {
                $values_10 = new \stdClass();
                foreach ($object->getEnvironment() as $key => $value_19) {
                    if (preg_match('/.+/', $key) && !is_null($value_19)) {
                        $value_20 = $value_19;
                        if (is_string($value_19)) {
                            $value_20 = $value_19;
                        }
                        if (is_float($value_19)) {
                            $value_20 = $value_19;
                        }
                        if (is_null($value_19)) {
                            $value_20 = $value_19;
                        }
                        $values_10->{$key} = $value_20;
                        continue;
                    }
                }
                $value_18 = $values_10;
            }
            if (is_array($object->getEnvironment())) {
                $values_11 = [];
                foreach ($object->getEnvironment() as $value_21) {
                    $values_11[] = $value_21;
                }
                $value_18 = $values_11;
            }
            $data->{'environment'} = $value_18;
        }
        if (null !== $object->getExpose()) {
            $values_12 = [];
            foreach ($object->getExpose() as $value_22) {
                $value_23 = $value_22;
                if (is_string($value_22)) {
                    $value_23 = $value_22;
                }
                if (is_float($value_22)) {
                    $value_23 = $value_22;
                }
                $values_12[] = $value_23;
            }
            $data->{'expose'} = $values_12;
        }
        if (null !== $object->getExternalLinks()) {
            $values_13 = [];
            foreach ($object->getExternalLinks() as $value_24) {
                $values_13[] = $value_24;
            }
            $data->{'external_links'} = $values_13;
        }
        if (null !== $object->getExtraHosts()) {
            $value_25 = $object->getExtraHosts();
            if (!is_null($object->getExtraHosts())) {
                $values_14 = new \stdClass();
                foreach ($object->getExtraHosts() as $key_1 => $value_26) {
                    if (preg_match('/.+/', $key_1) && !is_null($value_26)) {
                        $value_27 = $value_26;
                        if (is_string($value_26)) {
                            $value_27 = $value_26;
                        }
                        if (is_float($value_26)) {
                            $value_27 = $value_26;
                        }
                        if (is_null($value_26)) {
                            $value_27 = $value_26;
                        }
                        $values_14->{$key_1} = $value_27;
                        continue;
                    }
                }
                $value_25 = $values_14;
            }
            if (is_array($object->getExtraHosts())) {
                $values_15 = [];
                foreach ($object->getExtraHosts() as $value_28) {
                    $values_15[] = $value_28;
                }
                $value_25 = $values_15;
            }
            $data->{'extra_hosts'} = $value_25;
        }
        if (null !== $object->getHealthcheck()) {
            $data->{'healthcheck'} = $this->normalizer->normalize($object->getHealthcheck(), 'json', $context);
        }
        if (null !== $object->getHostname()) {
            $data->{'hostname'} = $object->getHostname();
        }
        if (null !== $object->getImage()) {
            $data->{'image'} = $object->getImage();
        }
        if (null !== $object->getIpc()) {
            $data->{'ipc'} = $object->getIpc();
        }
        if (null !== $object->getIsolation()) {
            $data->{'isolation'} = $object->getIsolation();
        }
        if (null !== $object->getLabels()) {
            $value_29 = $object->getLabels();
            if (!is_null($object->getLabels())) {
                $values_16 = new \stdClass();
                foreach ($object->getLabels() as $key_2 => $value_30) {
                    if (preg_match('/.+/', $key_2) && !is_null($value_30)) {
                        $value_31 = $value_30;
                        if (is_string($value_30)) {
                            $value_31 = $value_30;
                        }
                        if (is_float($value_30)) {
                            $value_31 = $value_30;
                        }
                        if (is_null($value_30)) {
                            $value_31 = $value_30;
                        }
                        $values_16->{$key_2} = $value_31;
                        continue;
                    }
                }
                $value_29 = $values_16;
            }
            if (is_array($object->getLabels())) {
                $values_17 = [];
                foreach ($object->getLabels() as $value_32) {
                    $values_17[] = $value_32;
                }
                $value_29 = $values_17;
            }
            $data->{'labels'} = $value_29;
        }
        if (null !== $object->getLinks()) {
            $values_18 = [];
            foreach ($object->getLinks() as $value_33) {
                $values_18[] = $value_33;
            }
            $data->{'links'} = $values_18;
        }
        if (null !== $object->getLogging()) {
            $data->{'logging'} = $this->normalizer->normalize($object->getLogging(), 'json', $context);
        }
        if (null !== $object->getMacAddress()) {
            $data->{'mac_address'} = $object->getMacAddress();
        }
        if (null !== $object->getNetworkMode()) {
            $data->{'network_mode'} = $object->getNetworkMode();
        }
        if (null !== $object->getNetworks()) {
            $value_34 = $object->getNetworks();
            if (is_array($object->getNetworks())) {
                $values_19 = [];
                foreach ($object->getNetworks() as $value_35) {
                    $values_19[] = $value_35;
                }
                $value_34 = $values_19;
            }
            if (!is_null($object->getNetworks())) {
                $values_20 = new \stdClass();
                foreach ($object->getNetworks() as $key_3 => $value_36) {
                    if (preg_match('/^[a-zA-Z0-9._-]+$/', $key_3) && !is_null($value_36)) {
                        $value_37 = $value_36;
                        if (is_object($value_36)) {
                            $value_37 = $value_36;
                        }
                        if (is_null($value_36)) {
                            $value_37 = $value_36;
                        }
                        $values_20->{$key_3} = $value_37;
                        continue;
                    }
                }
                $value_34 = $values_20;
            }
            $data->{'networks'} = $value_34;
        }
        $value_38 = $object->getPid();
        if (is_string($object->getPid())) {
            $value_38 = $object->getPid();
        }
        if (is_null($object->getPid())) {
            $value_38 = $object->getPid();
        }
        $data->{'pid'} = $value_38;
        if (null !== $object->getPorts()) {
            $values_21 = [];
            foreach ($object->getPorts() as $value_39) {
                $value_40 = $value_39;
                if (is_float($value_39)) {
                    $value_40 = $value_39;
                }
                if (is_string($value_39)) {
                    $value_40 = $value_39;
                }
                if (is_object($value_39)) {
                    $value_40 = $value_39;
                }
                $values_21[] = $value_40;
            }
            $data->{'ports'} = $values_21;
        }
        if (null !== $object->getPrivileged()) {
            $data->{'privileged'} = $object->getPrivileged();
        }
        if (null !== $object->getReadOnly()) {
            $data->{'read_only'} = $object->getReadOnly();
        }
        if (null !== $object->getRestart()) {
            $data->{'restart'} = $object->getRestart();
        }
        if (null !== $object->getSecurityOpt()) {
            $values_22 = [];
            foreach ($object->getSecurityOpt() as $value_41) {
                $values_22[] = $value_41;
            }
            $data->{'security_opt'} = $values_22;
        }
        if (null !== $object->getShmSize()) {
            $value_42 = $object->getShmSize();
            if (is_float($object->getShmSize())) {
                $value_42 = $object->getShmSize();
            }
            if (is_string($object->getShmSize())) {
                $value_42 = $object->getShmSize();
            }
            $data->{'shm_size'} = $value_42;
        }
        if (null !== $object->getSecrets()) {
            $values_23 = [];
            foreach ($object->getSecrets() as $value_43) {
                $value_44 = $value_43;
                if (is_string($value_43)) {
                    $value_44 = $value_43;
                }
                if (is_object($value_43)) {
                    $value_44 = $value_43;
                }
                $values_23[] = $value_44;
            }
            $data->{'secrets'} = $values_23;
        }
        if (null !== $object->getSysctls()) {
            $value_45 = $object->getSysctls();
            if (!is_null($object->getSysctls())) {
                $values_24 = new \stdClass();
                foreach ($object->getSysctls() as $key_4 => $value_46) {
                    if (preg_match('/.+/', $key_4) && !is_null($value_46)) {
                        $value_47 = $value_46;
                        if (is_string($value_46)) {
                            $value_47 = $value_46;
                        }
                        if (is_float($value_46)) {
                            $value_47 = $value_46;
                        }
                        if (is_null($value_46)) {
                            $value_47 = $value_46;
                        }
                        $values_24->{$key_4} = $value_47;
                        continue;
                    }
                }
                $value_45 = $values_24;
            }
            if (is_array($object->getSysctls())) {
                $values_25 = [];
                foreach ($object->getSysctls() as $value_48) {
                    $values_25[] = $value_48;
                }
                $value_45 = $values_25;
            }
            $data->{'sysctls'} = $value_45;
        }
        if (null !== $object->getStdinOpen()) {
            $data->{'stdin_open'} = $object->getStdinOpen();
        }
        if (null !== $object->getStopGracePeriod()) {
            $data->{'stop_grace_period'} = $object->getStopGracePeriod();
        }
        if (null !== $object->getStopSignal()) {
            $data->{'stop_signal'} = $object->getStopSignal();
        }
        if (null !== $object->getTmpfs()) {
            $value_49 = $object->getTmpfs();
            if (is_string($object->getTmpfs())) {
                $value_49 = $object->getTmpfs();
            }
            if (is_array($object->getTmpfs())) {
                $values_26 = [];
                foreach ($object->getTmpfs() as $value_50) {
                    $values_26[] = $value_50;
                }
                $value_49 = $values_26;
            }
            $data->{'tmpfs'} = $value_49;
        }
        if (null !== $object->getTty()) {
            $data->{'tty'} = $object->getTty();
        }
        if (null !== $object->getUlimits()) {
            $values_27 = new \stdClass();
            foreach ($object->getUlimits() as $key_5 => $value_51) {
                if (preg_match('/^[a-z]+$/', $key_5) && !is_null($value_51)) {
                    $value_52 = $value_51;
                    if (is_int($value_51)) {
                        $value_52 = $value_51;
                    }
                    if (is_object($value_51)) {
                        $value_52 = $value_51;
                    }
                    $values_27->{$key_5} = $value_52;
                    continue;
                }
            }
            $data->{'ulimits'} = $values_27;
        }
        if (null !== $object->getUser()) {
            $data->{'user'} = $object->getUser();
        }
        if (null !== $object->getUsernsMode()) {
            $data->{'userns_mode'} = $object->getUsernsMode();
        }
        if (null !== $object->getVolumes()) {
            $values_28 = [];
            foreach ($object->getVolumes() as $value_53) {
                $value_54 = $value_53;
                if (is_string($value_53)) {
                    $value_54 = $value_53;
                }
                if (is_object($value_53)) {
                    $value_54 = $value_53;
                }
                $values_28[] = $value_54;
            }
            $data->{'volumes'} = $values_28;
        }
        if (null !== $object->getWorkingDir()) {
            $data->{'working_dir'} = $object->getWorkingDir();
        }
        foreach ($object as $key_6 => $value_55) {
            if (preg_match('/^x-/', $key_6)) {
                $data->{$key_6} = $value_55;
            }
        }

        return $data;
    }
}
